"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.
   Операцию clear() не используем.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time


def measurement(func):
    def timer(*args, **kwargs):
        start_time = time.time()
        # print(start_time)
        result = func(*args, **kwargs)
        end_time = time.time()
        # print(end_time)
        print(f"Для {func.__name__} время исполнения", end=" ")
        print("{:.16f}".format(end_time - start_time))
        return result

    return timer


@measurement
def fill_list_1(lst, ellements):
    for i in range(ellements):
        lst.append(i)  # O(1) сложность
    return sum(lst)  # O(N)


@measurement
def fill_list_2(lst, ellements):
    for i in range(ellements):
        lst.insert(0, i)  # O(N) сложность
    return sum(lst)  # O(N)


@measurement
def fill_dict_1(dct, ellements):
    for i in range(ellements):
        dct[i] = i  # O(1) сложность
    return sum(v for v in dct.values())  # O(N)


fill_dict_1({}, 1000)
fill_list_1([], 1000)
fill_list_2([], 1000)

"""
Самая быстрая выходит fill_list_1 но сложность O(1) как и fill_dict_1 (хеш функция для словаря)
Сумма элементов списка и словаря картину по времени не меняет при одинаковой сложности O(N)
"""